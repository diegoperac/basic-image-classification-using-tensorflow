# -*- coding: utf-8 -*-
"""basic-image-classification-using-tensorflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YZYzfoBQFK8_l68HjaBF0kKU-_Rdte1q
"""

# Import TensorFlow

!pip install tensorflow
import tensorflow as tf

#Import the Dataset 

from tensorflow.keras.datasets import mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

#Shapes of Imported Arrays

print('x_train shape:', x_train.shape)
print('y_train shape:', y_train.shape)
print('x_test shape:', x_test.shape)
print('y_test shape:', y_test.shape)

# Encoding Labels 

from tensorflow.keras.utils import to_categorical

y_train_encoded = to_categorical(y_train)
y_test_encoded = to_categorical(y_test)

# Pre Processing the Examples

import numpy as np

x_train_reshaped = np.reshape(x_train, (60000, 784))
x_test_reshaped = np.reshape(x_test, (10000, 784))

# Data Normalization

x_mean = np.mean(x_train_reshaped)
x_std = np.std(x_train_reshaped)

epsilon = 1e-10

x_train_norm = (x_train_reshaped - x_mean) / (x_std + epsilon)
x_test_norm = (x_test_reshaped - x_mean) / (x_std + epsilon)

# Creating a Model

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential ([
    Dense(128, activation='relu', input_shape=(784,)),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
    
# Compiling the Model

model.compile(
    optimizer='sgd',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

model.summary()

# Training the Model

model.fit(x_train_norm, y_train_encoded, epochs=3)
    
# Predictions 

preds = model.predict(x_test_norm)
print('Shape of preds:', preds.shape)
    
# Plotting the Results

from matplotlib import pyplot as plt
plt.figure(figsize=(12,12))

start_index=0

for i in range(25):
  plt.subplot(5,5,i+1)
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])

pred = np.argmax(preds[start_index+i])
gt = y_test[start_index+i]

col = 'g'
if pred != gt:
  col = 'r'

  plt.xlabel('i={}, pred={}, gt={}'.format(start_index+i, pred, gt))
  plt.imshow(x_test[start_index+i], cmap='binary')
plt.show()
